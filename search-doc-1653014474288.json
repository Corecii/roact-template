[{"title":"Select","type":0,"sectionRef":"#","url":"api/Select","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Select","url":"api/Select#functions","content":" "},{"title":"prop​","type":1,"pageTitle":"Select","url":"api/Select#prop","content":"&lt;/&gt; Select.prop( prop: string, value: any ) → (instance: Instance ) → boolean Selects an element according to the value of a property  "},{"title":"name​","type":1,"pageTitle":"Select","url":"api/Select#name","content":"&lt;/&gt; Select.name(name: string) → (instance: Instance ) → boolean Selects an element according to its name. This is slower than the default [&quot;name&quot;] = { changes } syntax.  "},{"title":"class​","type":1,"pageTitle":"Select","url":"api/Select#class","content":"&lt;/&gt; Select.class(class: string) → (instance: Instance ) → boolean Selects an element according to its class name.  "},{"title":"prop​","type":1,"pageTitle":"Select","url":"api/Select#prop","content":"&lt;/&gt; Select.prop( prop: string, value: any ) → (instance: Instance ) → boolean Selects an element according to if it :IsA class  "},{"title":"propPattern​","type":1,"pageTitle":"Select","url":"api/Select#propPattern","content":"&lt;/&gt; Select.propPattern( prop: string, pattern: string ) → (instance: Instance ) → boolean Selects an element according whether the value of a property matches a pattern.  "},{"title":"namePattern​","type":1,"pageTitle":"Select","url":"api/Select#namePattern","content":"&lt;/&gt; Select.namePattern(pattern: string) → (instance: Instance ) → boolean Selects an element according whether the name matches a pattern.  "},{"title":"classPattern​","type":1,"pageTitle":"Select","url":"api/Select#classPattern","content":"&lt;/&gt; Select.classPattern(pattern: string) → (instance: Instance ) → boolean Selects an element according whether the class name matches a pattern. For example, ^Text.+$ matches both TextLabel and TextBox.  "},{"title":"attribute​","type":1,"pageTitle":"Select","url":"api/Select#attribute","content":"&lt;/&gt; Select.attribute( attribute: string, value: string ) → (instance: Instance ) → boolean Selects an element according whether the value of an attribute equals a value.  "},{"title":"tag​","type":1,"pageTitle":"Select","url":"api/Select#tag","content":"&lt;/&gt; Select.tag(tag: string) → (instance: Instance ) → boolean Selects an element according whether its template instance has a tag.  "},{"title":"some​","type":1,"pageTitle":"Select","url":"api/Select#some","content":"&lt;/&gt; Select.some(...: Selector) → (instance: Instance ) → boolean Selects an element according whether at least one of the given selectors matches.  "},{"title":"every​","type":1,"pageTitle":"Select","url":"api/Select#every","content":"&lt;/&gt; Select.every(...: Selector) → (instance: Instance ) → boolean Selects an element according whether all of the given selectors matches.  "},{"title":"no​","type":1,"pageTitle":"Select","url":"api/Select#no","content":"&lt;/&gt; Select.no(selector: Selector) → (instance: Instance ) → boolean Selects an element if the given selector fails for the element. "},{"title":"RoactTemplate","type":0,"sectionRef":"#","url":"api/RoactTemplate","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"RoactTemplate","url":"api/RoactTemplate#types","content":" "},{"title":"Selector​","type":1,"pageTitle":"RoactTemplate","url":"api/RoactTemplate#Selector","content":"&lt;/&gt; type Selector = string | (instance: Instance ) → boolean Used to determine whether a change should apply to an instance. You can write your own or use the ones under Select. Name-based selection is preferred over using Selector callbacks because name-based selection is faster.  "},{"title":"ChangesTable​","type":1,"pageTitle":"RoactTemplate","url":"api/RoactTemplate#ChangesTable","content":"&lt;/&gt; type ChangesTable = {[any]: any}@withinRoactTemplate Represents properties to overwrite on an element. You can use RoactTemplate.None to set a property to nil. You can use [Roact.Children] = {} to add children to an element. If you want to remove a child you need to set it to RoactTemplate.None or use a ChangesCallback to mutate the children list.  "},{"title":"ChangesCallback​","type":1,"pageTitle":"RoactTemplate","url":"api/RoactTemplate#ChangesCallback","content":"&lt;/&gt; type ChangesCallback = ( props: {[any]: any}, children: {[string]: any} ) → () A callback that mutates the props and children tables.  "},{"title":"Changes​","type":1,"pageTitle":"RoactTemplate","url":"api/RoactTemplate#Changes","content":"&lt;/&gt; type Changes = ChangesTable | ChangesCallback  "},{"title":"Properties​","type":1,"pageTitle":"RoactTemplate","url":"api/RoactTemplate#properties","content":" "},{"title":"Select​","type":1,"pageTitle":"RoactTemplate","url":"api/RoactTemplate#Select","content":"&lt;/&gt; RoactTemplate.Select: Select Selectors to use to change descendent elements. These selectors will be slower than name-based selection. Name selection is preferred since we can do fast look-ups to check if any child has a given name.  "},{"title":"None​","type":1,"pageTitle":"RoactTemplate","url":"api/RoactTemplate#None","content":"&lt;/&gt; RoactTemplate.None: None Represents &quot;nil&quot; when overwriting props or children. "},{"title":"Functions​","type":1,"pageTitle":"RoactTemplate","url":"api/RoactTemplate#functions","content":" "},{"title":"fromInstance​","type":1,"pageTitle":"RoactTemplate","url":"api/RoactTemplate#fromInstance","content":"&lt;/&gt; RoactTemplate.fromInstance( Roact: Roact, instance: Instance ) → ({[Selector]: Changes}) → Element Creates a component given an instance. The component's props are a dictionary of Selector -&gt; Changes where: A Selector can be a string (fast) or a callback that acts on the Instance and returns true/false (slow). Changes can be a table of properties (including Roact.Children) or a function like (props: { [any]: any }, children: { [string]: any }) -&gt; () which mutates the props and children. For example: local Roact = require(game.ReplicatedStorage.Packages.Roact) local RoactTemplate = require(game.ReplicatedStorage.Packages.RoactTemplate) local InventoryTemplate = RoactTemplate.fromInstance(Roact, UITemplates.InventoryApp) local function InventoryApp(props) return Roact.createElement(InventoryTemplate, { WindowTitle = { Text = props.category, }, OuterFrame = { Visible = props.visible, }, Scroller = { [Roact.Children] = makeInventoryItems(props.items), }, }) end   "},{"title":"wrapped​","type":1,"pageTitle":"RoactTemplate","url":"api/RoactTemplate#wrapped","content":"&lt;/&gt; RoactTemplate.wrapped(component: Component) → Changes Used to wrap an element with a component. Wrapping a descendant element with a component allows you to efficiently apply stateful changes without re-rendering the whole tree. The only provided prop is template which can be used to render the elements we're wrapping. template supports the { [Selector]: Changes } props as usual. For example: local TitleComponent = Roact.Component:extend(&quot;TitleComponent&quot;) function TitleComponent:init() self:setState({ transparency = 1 }) end function TitleComponent:didMount() self.updater = RunService.Heartbeat:Connect(function() self:setState({ transparency = math.sin(os.clock() / math.pi) }) end) end function TitleComponent:render() return Roact.createElement(self.props.template, { Title = { TextTransparency = self.state.transparency, }, }) end local InventoryTemplate = RoactTemplate.fromInstance(Roact, ExampleTemplateUI) -- Now we can wrap the Title with our TitleComponent to get stateful -- changes without re-rendering the whole outer component. Roact.createElement(Template, { Title = RoactTemplate.wrapped(TitleComponent) }) caution The template component does not automatically preserve the props passed to the outer component. If you need the same props, pass similar props when you createElement your template in the component's render. Be careful not to pass the wrapped component into the template's props as that would apply the wrapped component recursively, infinitely. "}]