"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[107],{3811:function(e){e.exports=JSON.parse('{"functions":[{"name":"fromInstance","desc":"Creates a component given an instance.\\n\\nThe component\'s props are a dictionary of `Selector -> Changes` where:\\n* A `Selector` can be a `string` (fast) *or* a callback that acts on the\\n  Instance and returns true/false (slow).\\n* `Changes` can be a table of properties (including `Roact.Children`) or a\\n  function like `(props: { [any]: any }, children: { [string]: any }) -> ()`\\n  which mutates the props and children.\\n\\nFor example:\\n```lua\\nlocal Roact = require(game.ReplicatedStorage.Packages.Roact)\\nlocal RoactTemplate = require(game.ReplicatedStorage.Packages.RoactTemplate)\\n\\nlocal InventoryTemplate = RoactTemplate.fromInstance(Roact, UITemplates.InventoryApp)\\n\\nlocal function InventoryApp(props)\\n\\treturn Roact.createElement(InventoryTemplate, {\\n\\t\\tWindowTitle = {\\n\\t\\t\\tText = props.category,\\n\\t\\t},\\n\\t\\tOuterFrame = {\\n\\t\\t\\tVisible = props.visible,\\n\\t\\t},\\n\\t\\tScroller = {\\n\\t\\t\\t[Roact.Children] = makeInventoryItems(props.items),\\n\\t\\t},\\n\\t})\\nend\\n```","params":[{"name":"Roact","desc":"","lua_type":"Roact"},{"name":"instance","desc":"","lua_type":"Instance"}],"returns":[{"desc":"","lua_type":"({ [Selector]: Changes }) -> Element\\n"}],"function_type":"static","source":{"line":227,"path":"src/lib/init.lua"}},{"name":"wrapped","desc":"Used to wrap an element with a component.\\n\\nWrapping a descendant element with a component allows you to efficiently\\napply stateful changes without re-rendering the whole tree.\\n\\nThe only provided prop is `template` which can be used to render the\\nelements we\'re wrapping. `template` supports the `{ [Selector]: Changes }`\\nprops as usual.\\n\\nFor example:\\n```lua\\n    local TitleComponent = Roact.Component:extend(\\"TitleComponent\\")\\n\\n    function TitleComponent:init()\\n        self:setState({ transparency = 1 })\\n    end\\n\\n    function TitleComponent:didMount()\\n        self.updater = RunService.Heartbeat:Connect(function()\\n            self:setState({ transparency = math.sin(os.clock() / math.pi) })\\n        end)\\n    end\\n\\n    function TitleComponent:render()\\n        return Roact.createElement(self.props.template, {\\n            Title = {\\n                TextTransparency = self.state.transparency,\\n            },\\n        })\\n    end\\n\\n    local InventoryTemplate = RoactTemplate.fromInstance(Roact, ExampleTemplateUI)\\n\\n    -- Now we can wrap the Title with our TitleComponent to get stateful\\n    -- changes without re-rendering the whole outer component.\\n    Roact.createElement(Template, {\\n        Title = RoactTemplate.wrapped(TitleComponent)\\n    })\\n```\\n\\n:::caution\\n\\nThe `template` component does not automatically preserve the props passed to\\nthe outer component. If you need the same props, pass similar props when you\\ncreateElement your `template` in the component\'s `render`.\\n\\n***Be careful not to pass the `wrapped` component into the `template`\'s\\nprops*** as that would apply the wrapped component recursively, infinitely.\\n\\n:::","params":[{"name":"component","desc":"","lua_type":"Component"}],"returns":[{"desc":"","lua_type":"Changes\\n"}],"function_type":"static","source":{"line":283,"path":"src/lib/init.lua"}},{"name":"componentFromInstance","desc":"Creates a component given an instance. This is the same as `fromInstance`.\\n\\nSee `fromInstance` for more info.","params":[{"name":"Roact","desc":"","lua_type":"Roact"},{"name":"instance","desc":"","lua_type":"Instance"}],"returns":[{"desc":"","lua_type":"({ [Selector]: Changes }) -> Element\\n"}],"function_type":"static","tags":["Extra"],"private":true,"source":{"line":296,"path":"src/lib/init.lua"}},{"name":"staticComponentFromInstance","desc":"Creates a static component given an instance.\\n\\nThis component cannot change since it caches its elements. This is a very\\nspeedy way to show static UI since the Roact element tree is created only\\nonce.","params":[{"name":"Roact","desc":"","lua_type":"Roact"},{"name":"instance","desc":"","lua_type":"Instance"},{"name":"selectors","desc":"","lua_type":"{ [Selector]: Changes }\\n"}],"returns":[{"desc":"","lua_type":"(...any) -> Element\\n"}],"function_type":"static","tags":["Extra"],"private":true,"source":{"line":316,"path":"src/lib/init.lua"}},{"name":"propertiesFromInstance","desc":"Returns the `props` necessary to create an instance. The props can be passed\\nin to `createElement` to create an equivalent instance, minus its children.","params":[{"name":"instance","desc":"","lua_type":"Instance"}],"returns":[{"desc":"","lua_type":"{ [string]: any }\\n"}],"function_type":"static","tags":["Extra"],"private":true,"source":{"line":336,"path":"src/lib/init.lua"}},{"name":"templateFromInstance","desc":"Returns the internal template for a given instance.","params":[{"name":"instance","desc":"","lua_type":"Instance"}],"returns":[{"desc":"","lua_type":"TemplateItem\\n"}],"function_type":"static","tags":["Extra"],"private":true,"source":{"line":367,"path":"src/lib/init.lua"}},{"name":"elementFromTemplate","desc":"Creates a Roact element from an internal template.","params":[{"name":"Roact","desc":"","lua_type":"Roact"},{"name":"template","desc":"","lua_type":"TemplateItem"},{"name":"selectors","desc":"","lua_type":"{ [Selector]: Changes }?\\n"}],"returns":[{"desc":"","lua_type":"Element\\n"}],"function_type":"static","tags":["Extra"],"private":true,"source":{"line":554,"path":"src/lib/init.lua"}},{"name":"componentFromTemplate","desc":"Creates a Roact component from an internal template.","params":[{"name":"Roact","desc":"","lua_type":"Roact"},{"name":"template","desc":"","lua_type":"TemplateItem"}],"returns":[{"desc":"","lua_type":"({ [Selector]: Changes }) -> Element\\n"}],"function_type":"static","tags":["Extra"],"private":true,"source":{"line":610,"path":"src/lib/init.lua"}}],"properties":[{"name":"Select","desc":"Selectors to use to change descendent elements.\\n\\nThese selectors **will be slower** than name-based selection. Name selection\\nis preferred since we can do fast look-ups to check if any child has a given\\nname.","lua_type":"Select","source":{"line":71,"path":"src/lib/init.lua"}},{"name":"None","desc":"Represents \\"nil\\" when overwriting props or children.","lua_type":"None","source":{"line":151,"path":"src/lib/init.lua"}},{"name":"Root","desc":"A special selector representing the root instance of a template.\\n\\nThis is an easy alternative to specifying the root instance\'s name, which\\nmay not stay consistent.\\n\\nFor example:\\n```lua\\nlocal function ButtonFromTemplate(instance)\\n    -- instance can be any Button object\\n    local Button = RoactTemplate.fromInstance(instance)\\n    return function(props)\\n        return Roact.createElement(Button, {\\n            -- we don\'t know the name of the button, so we can use Root instead.\\n            [RoactTemplate.Root] = {\\n                [Roact.Event.Activated] = props.onActivated,\\n            },\\n        })\\n    end\\nend\\n```","lua_type":"Root","source":{"line":188,"path":"src/lib/init.lua"}}],"types":[{"name":"Selector","desc":"Used to determine whether a change should apply to an instance. You can\\nwrite your own or use the ones under `Select`.\\n\\nName-based selection is preferred over using Selector callbacks because\\nname-based selection is faster.","lua_type":"string | Root | (instance: Instance) -> boolean","source":{"line":83,"path":"src/lib/init.lua"}},{"name":"Changes","desc":"","lua_type":"ChangesTable | ChangesCallback","source":{"line":88,"path":"src/lib/init.lua"}},{"name":"ChangesTable","desc":"Represents properties to overwrite on an element.\\n\\n* You can use `RoactTemplate.None` to set a property to nil.\\n* You can use `[Roact.Children] = {}` to add children to an element.\\n* If you want to remove a child you need to set it to `RoactTemplate.None`.\\n* Children with the same name are placed in a fragment with that name.\\n  You can remove them all at once -- or overwrite them all at once -- by\\n  setting the child to None or some element.","lua_type":"{ [any]: any }","source":{"line":102,"path":"src/lib/init.lua"}},{"name":"ChangesCallback","desc":"A function that is called on a template instance and returns changes. This\\nallows you to make changes dependent upon the instance\'s existing\\nproperties, attributes, etc. For example, you can use this to darken the\\ncolor that was set in the studio editor.\\n\\nFor example:\\n```lua\\nlocal ButtonTemplate = RoactTemplate.fromInstance(SomeButtonInstance)\\n\\nlocal function Button()\\n    return Roact.createElement(ButtonTemplate, {\\n        Button = function(templateInstance)\\n            if mouseIsOverInstance() then\\n                -- Darken the button if the mouse is over it!\\n                return {\\n                    BackgroundColor3 = Color3.new(\\n                        templateInstance.BackgroundColor3.R * 0.8,\\n                        templateInstance.BackgroundColor3.G * 0.8,\\n                        templateInstance.BackgroundColor3.B * 0.8\\n                    ),\\n                }\\n            else\\n                return {}\\n            end\\n        end,\\n    })\\nend\\n```\\n\\n:::caution\\n\\nYou should not modify `instance` or its children. It won\'t directly affect\\nthe render, since `instance` is just a template, but it may affect future\\nrenders that depend on the instance.\\n\\n:::","lua_type":"(templateInstance: Instance) -> ChangesTable","source":{"line":144,"path":"src/lib/init.lua"}}],"name":"RoactTemplate","desc":"A module to create a Roact tree at runtime given an Instance, with the\\nability to change descendants using selectors.\\n\\n:::info\\n\\nThe items marked **\\"Private\\"** are *not* private, they\'re just intentionally\\nhidden by default. If you have a use for them, feel free to use them!\\n\\n:::","source":{"line":59,"path":"src/lib/init.lua"}}')}}]);