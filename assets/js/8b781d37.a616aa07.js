"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[107],{3811:function(e){e.exports=JSON.parse('{"functions":[{"name":"fromInstance","desc":"Creates a component given an instance.\\n\\nThe component\'s props are a dictionary of `Selector -> Changes` where:\\n* A `Selector` can be a `string` (fast) *or* a callback that acts on the\\n  Instance and returns true/false (slow).\\n* `Changes` can be a table of properties (including `Roact.Children`) or a\\n  function like `(props: { [any]: any }, children: { [string]: any }) -> ()`\\n  which mutates the props and children.\\n\\nFor example:\\n```lua\\nlocal Roact = require(game.ReplicatedStorage.Packages.Roact)\\nlocal RoactTemplate = require(game.ReplicatedStorage.Packages.RoactTemplate)\\n\\nlocal InventoryTemplate = RoactTemplate.fromInstance(Roact, UITemplates.InventoryApp)\\n\\nlocal function InventoryApp(props)\\n\\treturn Roact.createElement(InventoryTemplate, {\\n\\t\\tWindowTitle = {\\n\\t\\t\\tText = props.category,\\n\\t\\t},\\n\\t\\tOuterFrame = {\\n\\t\\t\\tVisible = props.visible,\\n\\t\\t},\\n\\t\\tScroller = {\\n\\t\\t\\t[Roact.Children] = makeInventoryItems(props.items),\\n\\t\\t},\\n\\t})\\nend\\n```","params":[{"name":"Roact","desc":"","lua_type":"Roact"},{"name":"instance","desc":"","lua_type":"Instance"}],"returns":[{"desc":"","lua_type":"({ [Selector]: Changes }) -> Element\\n"}],"function_type":"static","source":{"line":149,"path":"src/lib/init.lua"}},{"name":"wrapped","desc":"Used to wrap an element with a component.\\n\\nWrapping a descendant element with a component allows you to efficiently\\napply stateful changes without re-rendering the whole tree.\\n\\nThe only provided prop is `template` which can be used to render the\\nelements we\'re wrapping. `template` supports the `{ [Selector]: Changes }`\\nprops as usual.\\n\\nFor example:\\n```lua\\n    local TitleComponent = Roact.Component:extend(\\"TitleComponent\\")\\n\\n    function TitleComponent:init()\\n        self:setState({ transparency = 1 })\\n    end\\n\\n    function TitleComponent:didMount()\\n        self.updater = RunService.Heartbeat:Connect(function()\\n            self:setState({ transparency = math.sin(os.clock() / math.pi) })\\n        end)\\n    end\\n\\n    function TitleComponent:render()\\n        return Roact.createElement(self.props.template, {\\n            Title = {\\n                TextTransparency = self.state.transparency,\\n            },\\n        })\\n    end\\n\\n    local InventoryTemplate = RoactTemplate.fromInstance(Roact, ExampleTemplateUI)\\n\\n    -- Now we can wrap the Title with our TitleComponent to get stateful\\n    -- changes without re-rendering the whole outer component.\\n    Roact.createElement(Template, {\\n        Title = RoactTemplate.wrapped(TitleComponent)\\n    })\\n```\\n\\n:::caution\\n\\nThe `template` component does not automatically preserve the props passed to\\nthe outer component. If you need the same props, pass similar props when you\\ncreateElement your `template` in the component\'s `render`.\\n\\n***Be careful not to pass the `wrapped` component into the `template`\'s\\nprops*** as that would apply the wrapped component recursively, infinitely.\\n\\n:::","params":[{"name":"component","desc":"","lua_type":"Component"}],"returns":[{"desc":"","lua_type":"Changes\\n"}],"function_type":"static","source":{"line":205,"path":"src/lib/init.lua"}},{"name":"componentFromInstance","desc":"Creates a component given an instance. This is the same as `fromInstance`.\\n\\nSee `fromInstance` for more info.","params":[{"name":"Roact","desc":"","lua_type":"Roact"},{"name":"instance","desc":"","lua_type":"Instance"}],"returns":[{"desc":"","lua_type":"({ [Selector]: Changes }) -> Element\\n"}],"function_type":"static","tags":["Extra"],"private":true,"source":{"line":218,"path":"src/lib/init.lua"}},{"name":"staticComponentFromInstance","desc":"Creates a static component given an instance.\\n\\nThis component cannot change since it caches its elements. This is a very\\nspeedy way to show static UI since the Roact element tree is created only\\nonce.","params":[{"name":"Roact","desc":"","lua_type":"Roact"},{"name":"instance","desc":"","lua_type":"Instance"},{"name":"selectors","desc":"","lua_type":"{ [Selector]: Changes }\\n"}],"returns":[{"desc":"","lua_type":"(...any) -> Element\\n"}],"function_type":"static","tags":["Extra"],"private":true,"source":{"line":233,"path":"src/lib/init.lua"}},{"name":"propertiesFromInstance","desc":"Returns the `props` necessary to create an instance. The props can be passed\\nin to `createElement` to create an equivalent instance, minus its children.","params":[{"name":"instance","desc":"","lua_type":"Instance"}],"returns":[{"desc":"","lua_type":"{ [string]: any }\\n"}],"function_type":"static","tags":["Extra"],"private":true,"source":{"line":253,"path":"src/lib/init.lua"}},{"name":"templateFromInstance","desc":"Returns the internal template for a given instance.","params":[{"name":"instance","desc":"","lua_type":"Instance"}],"returns":[{"desc":"","lua_type":"TemplateItem\\n"}],"function_type":"static","tags":["Extra"],"private":true,"source":{"line":284,"path":"src/lib/init.lua"}},{"name":"elementFromTemplate","desc":"Creates a Roact element from an internal template.","params":[{"name":"Roact","desc":"","lua_type":"Roact"},{"name":"template","desc":"","lua_type":"TemplateItem"},{"name":"selectors","desc":"","lua_type":"{ [Selector]: Changes }?\\n"}],"returns":[{"desc":"","lua_type":"Element\\n"}],"function_type":"static","tags":["Extra"],"private":true,"source":{"line":430,"path":"src/lib/init.lua"}},{"name":"componentFromTemplate","desc":"Creates a Roact component from an internal template.","params":[{"name":"Roact","desc":"","lua_type":"Roact"},{"name":"template","desc":"","lua_type":"TemplateItem"}],"returns":[{"desc":"","lua_type":"({ [Selector]: Changes }) -> Element\\n"}],"function_type":"static","tags":["Extra"],"private":true,"source":{"line":469,"path":"src/lib/init.lua"}}],"properties":[{"name":"Select","desc":"Selectors to use to change descendent elements.\\n\\nThese selectors **will be slower** than name-based selection. Name selection\\nis preferred since we can do fast look-ups to check if any child has a given\\nname.","lua_type":"Select","source":{"line":61,"path":"src/lib/init.lua"}},{"name":"None","desc":"Represents \\"nil\\" when overwriting props or children.","lua_type":"None","source":{"line":105,"path":"src/lib/init.lua"}}],"types":[{"name":"Selector","desc":"Used to determine whether a change should apply to an instance. You can\\nwrite your own or use the ones under `Select`.\\n\\nName-based selection is preferred over using Selector callbacks because\\nname-based selection is faster.","lua_type":"string | (instance: Instance) -> boolean","source":{"line":73,"path":"src/lib/init.lua"}},{"name":"ChangesTable","desc":"Represents properties to overwrite on an element.\\n\\nYou can use `RoactTemplate.None` to set a property to nil.\\n\\nYou can use `[Roact.Children] = {}` to add children to an element. If you\\nwant to remove a child you need to set it to `RoactTemplate.None` or use a\\n`ChangesCallback` to mutate the children list.","lua_type":"{ [any]: any } @within RoactTemplate","source":{"line":86,"path":"src/lib/init.lua"}},{"name":"ChangesCallback","desc":"A callback that mutates the props and children tables.","lua_type":"(props: { [any]: any }, children: { [string]: any}) -> ()","source":{"line":93,"path":"src/lib/init.lua"}},{"name":"Changes","desc":"","lua_type":"ChangesTable | ChangesCallback","source":{"line":98,"path":"src/lib/init.lua"}}],"name":"RoactTemplate","desc":"A module to create a Roact tree at runtime given an Instance, with the\\nability to change descendants using selectors.\\n\\n:::info\\n\\nThe items marked **\\"Private\\"** are *not* private, they\'re just intentionally\\nhidden by default. If you have a use for them, feel free to use them!\\n\\n:::","source":{"line":49,"path":"src/lib/init.lua"}}')}}]);